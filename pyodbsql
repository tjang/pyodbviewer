#!/usr/bin/env python
# -*- encoding: utf-8

from __future__ import absolute_import, division, print_function

"""
If you are getting wx related import errors when running in a virtualenv:
Either make sure that the virtualenv has been created using
`virtualenv --system-site-packages venv` or manually add the wx library
path (e.g. /usr/lib/python2.7/dist-packages/wx-2.8-gtk2-unicode) to the
python path.
"""
import datetime
import pandas as pd
import numpy as np
import dfgui

import os
import subprocess
import sys, getopt
import argparse


def convert_float(val):
    try:
       return float(val)
    except ValueError:
       return np.nan

def query_odb_data(query, odbfile, lineMode, rowNumber):

    odbsql = "odbsql -q " + "'" + query + "'" + ' -i ' + odbfile + ' -f odbtk'
    print(odbsql)

    odb = subprocess.Popen(odbsql, shell=True, stdout=subprocess.PIPE, bufsize=-1)

    a = []
    i = 0

    if not lineMode :
      for line in odb.stdout.readlines():
          if i == 0:
            line = line.rstrip()
            columns_lists = line.split('!,!')
            i = i + 1
            print(columns_lists)
          else:
            a.append(line.split('!,!'))
    else:
      j = 0
      for line in odb.stdout.readlines():
          if i == 0:
            line = line.rstrip()
            columns_lists = line.split('!,!')
            i = i + 1
            print(columns_lists)
          else:
            a.append(line.split('!,!'))
            j = j + 1
            if j > rowNumber:
              break 

    # pandas dataframe
    odbdf = pd.DataFrame(data=a, columns=columns_lists)

    if "initial_obsvalue@body" in columns_lists:
        odbdf['initial_obsvalue@body'] = odbdf['initial_obsvalue@body'].apply(lambda x: convert_float(x))
    if "obsvalue@body" in columns_lists:
        odbdf['obsvalue@body'] = odbdf['obsvalue@body'].apply(lambda x: convert_float(x))
    if "corvalue@body" in columns_lists:
        odbdf['corvalue@body'] = odbdf['corvalue@body'].apply(lambda x: convert_float(x))
    if "bgvalue@body" in columns_lists:
        odbdf['bgvalue@body'] = odbdf['bgvalue@body'].apply(lambda x: convert_float(x))

    return odbdf


def make_table_query(tablename):
    with open(os.path.dirname(os.path.realpath(__file__))+'/tables/'+tablename,'r') as tfile:
         tmpquery = tfile.read().replace('\n',',')
    return tmpquery
    


def gen_query_for_table(tablename):
    table_lists_main = ['hdr','desc']
    table_lists_sub1 = ['sat','radar','modsurf','conv','body','errstat','air_quality']
    table_lists_sub2 = ['sat_body','conv_body']
    if any(tablename in s for s in table_lists_main):
       corn_query = make_table_query(tablename)
       table_query = "select " + corn_query + " from " + tablename
    elif any(tablename in s for s in table_lists_sub1):
       corn_query = make_table_query(tablename)
       table_query = "select " + corn_query + " from hdr, " + tablename
    elif any(tablename in s for s in table_lists_sub2):
       corn_query = make_table_query(tablename)
       table_query = "select " + corn_query + " from hdr, body, " + tablename
    else:
       corn_query = make_table_query(tablename)
       table_query = "select " + corn_query + " from hdr, sat, " + tablename

    return table_query


def main():

    tableMode = False
    lineMode = False
    rowNumber = -1

    opts, args = getopt.getopt(sys.argv[1:], "q:i:t:n:",["query=","ifile=","table=","nlines="])

    for opt, arg in opts:
        if opt in ("-q", "--query"):
           query = arg
        elif opt in ("-i", "--ifile"):
           odbfile = arg
        elif opt in ("-t", "--table"):
           tablename = arg
           tableMode = True
        elif opt in ("-n", "--nlines"):
           if not arg == "":
              lineMode = True
              rowNumber = int(arg)

    print(lineMode)

    if not tableMode: 
       df = query_odb_data(query, odbfile, lineMode, rowNumber)
       dfgui.show(df)
    else:
       query = gen_query_for_table(tablename)
       df = query_odb_data(query, odbfile, lineMode, rowNumber)
       dfgui.show(df)




if __name__ == "__main__":


    main()
